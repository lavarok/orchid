buildscript {
    ext.kotlin_version = '1.3.61'
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

rootProject.buildDir = 'build'

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def flutter = files(flutterJar)

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "net.orchid.Orchid"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode orcMonotonic.toInteger() - 946684800
        versionName orcPackage
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    sourceSets {
        main {
            assets.srcDirs += ['out-and/assets']
            jniLibs.srcDirs = ['out-and/jnilibs']
        }
    }

    dependencies {
        implementation flutter
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

def root = rootProject.projectDir.toPath()

def plugins = new Properties()
def file = new File(root.toFile(), '.flutter-plugins')
if (file.exists()) {
    file.withReader('UTF-8') { reader -> plugins.load(reader) }
}

plugins.each { name, _ ->
    def plugin = project.rootProject.findProject(":$name")

    project.dependencies {
        implementation plugin
    }

    plugin.afterEvaluate {
        plugin.android.buildTypes {
            profile {
                initWith debug
            }
        }
        plugin.dependencies {
            compileOnly flutter
        }
    }
}
